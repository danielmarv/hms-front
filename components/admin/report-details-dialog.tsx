"use client"

import { Eye, Download } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"

interface ReportDetailsDialogProps {
  open: boolean
  setOpen: (open: boolean) => void
  report: any // Replace 'any' with the actual type of your report object
  handleDownload: (reportId: string) => void
}

export function ReportDetailsDialog({ open, setOpen, report, handleDownload }: ReportDetailsDialogProps) {
  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="sm">
          <Eye className="h-4 w-4" />
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden">
        <DialogHeader>
          <DialogTitle>Report Details</DialogTitle>
        </DialogHeader>
        <div className="max-h-[80vh] overflow-hidden">
          <ScrollArea className="h-full pr-4">
            <div className="space-y-6 pb-4">
              {/* Report Information */}
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-base">Report Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label className="text-sm font-medium">Name</Label>
                      <p className="text-sm text-muted-foreground">{report.name}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium">Type</Label>
                      <Badge variant="outline" className="ml-2 capitalize">
                        {report.type}
                      </Badge>
                    </div>
                    <div>
                      <Label className="text-sm font-medium">Status</Label>
                      <Badge
                        variant={
                          report.status === "completed"
                            ? "default"
                            : report.status === "failed"
                              ? "destructive"
                              : "secondary"
                        }
                        className="ml-2"
                      >
                        {report.status}
                      </Badge>
                    </div>
                    <div>
                      <Label className="text-sm font-medium">Generated By</Label>
                      <p className="text-sm text-muted-foreground">
                        {report.generatedBy?.firstName} {report.generatedBy?.lastName}
                      </p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium">Created At</Label>
                      <p className="text-sm text-muted-foreground">{new Date(report.createdAt).toLocaleString()}</p>
                    </div>
                    {report.metadata?.executionTime && (
                      <div>
                        <Label className="text-sm font-medium">Execution Time</Label>
                        <p className="text-sm text-muted-foreground">{report.metadata.executionTime}ms</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* Parameters */}
              {report.parameters && (
                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-base">Parameters</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {report.parameters.startDate && (
                        <div>
                          <Label className="text-sm font-medium">Start Date</Label>
                          <p className="text-sm text-muted-foreground">
                            {new Date(report.parameters.startDate).toLocaleDateString()}
                          </p>
                        </div>
                      )}
                      {report.parameters.endDate && (
                        <div>
                          <Label className="text-sm font-medium">End Date</Label>
                          <p className="text-sm text-muted-foreground">
                            {new Date(report.parameters.endDate).toLocaleDateString()}
                          </p>
                        </div>
                      )}
                      {report.parameters.modules && report.parameters.modules.length > 0 && (
                        <div className="md:col-span-2">
                          <Label className="text-sm font-medium">Modules</Label>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {report.parameters.modules.map((module: string) => (
                              <Badge key={module} variant="secondary" className="text-xs">
                                {module}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Data Summary */}
              {report.data?.summary && (
                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-base">Summary</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {Object.entries(report.data.summary).map(([key, value]) => (
                        <div key={key}>
                          <Label className="text-sm font-medium capitalize">
                            {key.replace(/([A-Z])/g, " $1").trim()}
                          </Label>
                          <p className="text-sm text-muted-foreground">
                            {typeof value === "number" ? value.toLocaleString() : String(value)}
                          </p>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Email Recipients */}
              {report.recipients && report.recipients.length > 0 && (
                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-base">Email Recipients</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {report.recipients.map((recipient: any, index: number) => (
                        <div key={index} className="flex items-center gap-2">
                          <Badge variant="outline">{recipient.email}</Badge>
                          {recipient.name && <span className="text-sm text-muted-foreground">({recipient.name})</span>}
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Actions */}
              <div className="flex justify-end gap-2 pt-4 border-t">
                {report.status === "completed" && (
                  <Button onClick={() => handleDownload(report._id)} variant="outline">
                    <Download className="h-4 w-4 mr-2" />
                    Download
                  </Button>
                )}
                <Button onClick={() => setOpen(false)}>Close</Button>
              </div>
            </div>
          </ScrollArea>
        </div>
      </DialogContent>
    </Dialog>
  )
}
